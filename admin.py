from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from utils import send_message

async def moderate_reviews(update: Update, context: ContextTypes.DEFAULT_TYPE, user_state: str) -> None:
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
    pending_reviews = [review for review in context.application.bot_data.get('reviews', [])
                       if not review.get('approved', False) and not review.get('deleted', False)]

    if not pending_reviews:
        await send_message(update, context, "–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.", MENU_TREE['admin_menu']['options'])
        context.user_data['state'] = 'admin_menu'
        return

    for review in pending_reviews:
        try:
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ü–µ–ª–∏–∫–æ–º, –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π message_id
            await context.bot.forward_message(
                chat_id=ADMIN_ID,
                from_chat_id=review['user_id'],
                message_id=review['message_id']  # –ò—Å–ø–æ–ª—å–∑—É–µ–º `message_id` –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            )

            buttons = [
                [InlineKeyboardButton(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å‚úÖ", callback_data=f'publish_{review["message_id"]}'),
                 InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—åüóëÔ∏è", callback_data=f'delete_{review["message_id"]}')]
            ]
            reply_markup = InlineKeyboardMarkup(buttons)
            await context.bot.send_message(chat_id=ADMIN_ID, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    context.user_data['state'] = 'moderation_menu'

async def publish_review(context: ContextTypes.DEFAULT_TYPE, review: dict) -> None:
    try:
        if review['photo_file_ids']:
            if len(review['photo_file_ids']) > 1:
                media_group = [InputMediaPhoto(photo_id) for photo_id in review['photo_file_ids']]
                await context.bot.send_media_group(chat_id=CHANNEL_ID, media=media_group)
            else:
                await context.bot.send_photo(chat_id=CHANNEL_ID, photo=review['photo_file_ids'][0])

        await context.bot.forward_message(
            chat_id=CHANNEL_ID,
            from_chat_id=review['user_id'],
            message_id=review['message_id']
        )

        review['approved'] = True
        logger.info(f"–û—Ç–∑—ã–≤ –æ—Ç {review['user_name']} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞: {e}")
        await context.bot.send_message(chat_id=ADMIN_ID,
                                       text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤ –æ—Ç {review['user_name']}. –û—à–∏–±–∫–∞: {e}")
