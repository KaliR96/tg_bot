# -*- coding: utf-8 -*-
import logging
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import telegram.error  # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ telegram.error.Forbidden

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)

# –£–∫–∞–∂–∏—Ç–µ –≤–∞—à Telegram ID
ADMIN_ID = 1238802718  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π Telegram ID

# –¶–µ–Ω—ã –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —É–±–æ—Ä–∫–∏
CLEANING_PRICES = {
    '–ì–µ–Ω.–£–±–æ—Ä–∫–∞üßº': 125,
    '–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—èüßπ ': 75,
    '–ü–æ—Å–ª–µ—Å—Ç—Ä–æ–πüõ† ': 190,
    '–º—ã—Ç—å–µ –æ–∫–æ–Ωüß¥': 100
}

# –ü—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –∏ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
CLEANING_DETAILS = {
    '–ì–µ–Ω.–£–±–æ—Ä–∫–∞üßº': {
        'image_path': r'C:\Users\travo\Desktop\tg_bot\–≥–µ–Ω–µ—Ä–∞–ª–∫–∞.jpg',
        'details_text': '–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –ø–æ–ª–Ω—É—é —É–±–æ—Ä–∫—É –≤—Å–µ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã: —É–¥–∞–ª–µ–Ω–∏–µ –ø—ã–ª–∏, —á–∏—Å—Ç–∫–∞ –ø–æ–ª–æ–≤, –≤–ª–∞–∂–Ω–∞—è —É–±–æ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π –∏ —Ç.–¥.'
    },
    '–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—èüßπ ': {
        'image_path': r'C:\Users\travo\Desktop\tg_bot\–ø–æ–≤—Å–µ–¥–Ω–µ–≤–∫–∞.jpg',
        'details_text': '–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—èüßπ  —É–±–æ—Ä–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —á–∏—Å—Ç–æ—Ç—ã: –ø—Ä–æ—Ç–∏—Ä–∫–∞ –ø—ã–ª–∏, –º—ã—Ç—å–µ –ø–æ–ª–æ–≤, —É–±–æ—Ä–∫–∞ –Ω–∞ –∫—É—Ö–Ω–µ –∏ –≤ —Å–∞–Ω—É–∑–ª–µ.'
    },
    '–ü–æ—Å–ª–µ—Å—Ç—Ä–æ–πüõ† ': {
        'image_path': r'C:\Users\travo\Desktop\tg_bot\–ü–æ—Å–ª–µ—Å—Ç—Ä–æ–πüõ† .jpg',
        'details_text': '–£–±–æ—Ä–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞ –≤–∫–ª—é—á–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –ø—ã–ª–∏, –æ—á–∏—Å—Ç–∫—É –æ–∫–æ–Ω –∏ –¥–≤–µ—Ä–µ–π, —É–¥–∞–ª–µ–Ω–∏–µ —Å–ª–µ–¥–æ–≤ –∫—Ä–∞—Å–∫–∏ –∏ —Ç.–¥.'
    },
    '–º—ã—Ç—å–µ –æ–∫–æ–Ωüß¥': {
        'image_path': r'C:\Users\travo\Desktop\tg_bot\–æ–∫–Ω–∞.jpg',
        'details_text': '–º—ã—Ç—å–µ –æ–∫–æ–Ωüß¥ –≤–∫–ª—é—á–∞–µ—Ç –æ—á–∏—Å—Ç–∫—É —Å—Ç–µ–∫–æ–ª —Å–Ω–∞—Ä—É–∂–∏ –∏ –∏–∑–Ω—É—Ç—Ä–∏, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ—Ç–∏—Ä–∫—É —Ä–∞–º –∏ –ø–æ–¥–æ–∫–æ–Ω–Ω–∏–∫–æ–≤.'
    }
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –º–µ–Ω—é
MENU_TREE = {
    'main_menu': {
        'message': '–ü—Ä–∏–≤–µ—Ç! –Ø –í–µ—Ä–∞, —Ç–≤–æ—è —Ñ–µ—è —á–∏—Å—Ç–æ—Ç—ã.\n–ú–æ–π —Ä–æ–±–æ—Ç-—É–±–æ—Ä—â–∏–∫ –ø–æ–º–æ–∂–µ—Ç:\n- —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–±–æ—Ä–∫–∏\n- –°–≤—è–∑–∞—Ç—å—Å—èüìû —Å–æ –º–Ω–æ–π.',
        'options': [
            ['–¢–∞—Ä–∏—Ñ—ãüè∑Ô∏è', '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—ÄüßÆ'],  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
            ['–°–≤—è–∑–∞—Ç—å—Å—èüìû', '–û—Ç–∑—ã–≤—ãüí¨']     # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞
        ],
        'next_state': {
            '–¢–∞—Ä–∏—Ñ—ãüè∑Ô∏è': 'show_tariffs',
            '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—ÄüßÆ': 'calculator_menu',
            '–°–≤—è–∑–∞—Ç—å—Å—èüìû': 'contact',
            '–û—Ç–∑—ã–≤—ãüí¨': 'reviews_menu'
        }
    },
    'admin_menu': {
        'message': '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        'options': ['–ú–æ–¥–µ—Ä–∞—Ü–∏—è'],  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–í –Ω–∞—á–∞–ª–æüîô"
        'next_state': {
            '–ú–æ–¥–µ—Ä–∞—Ü–∏—è': 'moderation_menu',
        }
    },
    'moderation_menu': {
        'message': '–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è\n(–ù–æ–≤—ã–µ –û—Ç–∑—ã–≤—ãüí¨ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:)',
        'options': ['–ê–¥–º–∏–Ω –º–µ–Ω—é'],  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ê–¥–º–∏–Ω –º–µ–Ω—é"
        'next_state': {
            '–ê–¥–º–∏–Ω –º–µ–Ω—é': 'admin_menu'
        }
    },
    'reviews_menu': {
        'message': '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?',
        'options': ['–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤', '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –û—Ç–∑—ã–≤—ãüí¨', '–í –Ω–∞—á–∞–ª–æüîô'],
        'next_state': {
            '–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤': 'write_review',
            '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –û—Ç–∑—ã–≤—ãüí¨': 'view_reviews',
            '–í –Ω–∞—á–∞–ª–æüîô': 'main_menu'
        }
    },
    'write_review': {
        'message': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤üí¨:',
        'options': ['–í –Ω–∞—á–∞–ª–æüîô'],
        'next_state': {
            '–í –Ω–∞—á–∞–ª–æüîô': 'main_menu'
        }
    },
    'view_reviews': {
        'message': '–°–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤:\n(–ü—Ä–∏–º–µ—Ä: —Ç—É—Ç –º–æ–∂–Ω–æ –ø–æ–¥–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –û—Ç–∑—ã–≤—ãüí¨)',
        'options': ['–í –Ω–∞—á–∞–ª–æüîô'],
        'next_state': {
            '–í –Ω–∞—á–∞–ª–æüîô': 'reviews_menu'
        }
    },
    'show_tariffs': {
        'message': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π:',
        'options': [
            ['–ì–µ–Ω.–£–±–æ—Ä–∫–∞üßº', '–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—èüßπ '],  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
            ['–ü–æ—Å–ª–µ—Å—Ç—Ä–æ–πüõ† ', '–º—ã—Ç—å–µ –æ–∫–æ–Ωüß¥'],   # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞
            ['–í –Ω–∞—á–∞–ª–æüîô']                      # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
        ],
        'next_state': {
            '–ì–µ–Ω.–£–±–æ—Ä–∫–∞üßº': 'detail_–ì–µ–Ω.–£–±–æ—Ä–∫–∞üßº',
            '–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—èüßπ ': 'detail_–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—èüßπ ',
            '–ü–æ—Å–ª–µ—Å—Ç—Ä–æ–πüõ† ': 'detail_–ü–æ—Å–ª–µ—Å—Ç—Ä–æ–πüõ† ',
            '–º—ã—Ç—å–µ –æ–∫–æ–Ωüß¥': 'detail_–º—ã—Ç—å–µ –æ–∫–æ–Ωüß¥',
            '–í –Ω–∞—á–∞–ª–æüîô': 'main_menu'
        }
    },
    'calculator_menu': {
        'message': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–±–æ—Ä–∫–∏üß∫:',
        'options': [
            ['–ì–µ–Ω.–£–±–æ—Ä–∫–∞üßº', '–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—èüßπ '],  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
            ['–ü–æ—Å–ª–µ—Å—Ç—Ä–æ–πüõ† ', '–º—ã—Ç—å–µ –æ–∫–æ–Ωüß¥'],   # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞
            ['–í –Ω–∞—á–∞–ª–æüîô']                      # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
        ],
        'next_state': {
            '–ì–µ–Ω.–£–±–æ—Ä–∫–∞üßº': 'enter_square_meters',
            '–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—èüßπ ': 'enter_square_meters',
            '–ü–æ—Å–ª–µ—Å—Ç—Ä–æ–πüõ† ': 'enter_square_meters',
            '–º—ã—Ç—å–µ –æ–∫–æ–Ωüß¥': 'enter_square_meters',
            '–í –Ω–∞—á–∞–ª–æüîô': 'main_menu'
        }
    },
    'enter_square_meters': {
        'message': '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤:',
        'options': ['–í –Ω–∞—á–∞–ª–æüîô'],
        'next_state': {
            'calculate_result': 'calculate_result'
        }
    },
    'calculate_result': {
        'options': ['–í –Ω–∞—á–∞–ª–æüîô', '–°–≤—è–∑–∞—Ç—å—Å—èüìû'],
        'next_state': {
            '–í –Ω–∞—á–∞–ª–æüîô': 'main_menu',
            '–°–≤—è–∑–∞—Ç—å—Å—èüìû': 'contact'
        }
    },
    'contact': {
        'message': '–°–≤—è–∑–∞—Ç—å—Å—èüìû —Å –Ω–∞–º–∏ –≤—ã –º–æ–∂–µ—Ç–µ —á–µ—Ä–µ–∑ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:',
        'options': ['–í –Ω–∞—á–∞–ª–æüîô'],
        'next_state': {
            '–í –Ω–∞—á–∞–ª–æüîô': 'main_menu'
        }
    }
}

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—ÄüßÆ"
for tariff_name, details in CLEANING_DETAILS.items():
    MENU_TREE[f'detail_{tariff_name}'] = {
        'message': details['details_text'],
        'image_path': details['image_path'],
        'options': ['–ö–∞–ª—å–∫—É–ª—è—Ç–æ—ÄüßÆ', '–í –Ω–∞—á–∞–ª–æüîô'],
        'next_state': {
            '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—ÄüßÆ': 'calculator_menu',
            '–í –Ω–∞—á–∞–ª–æüîô': 'main_menu'
        }
    }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
async def send_message(update: Update, context: ContextTypes.DEFAULT_TYPE, message: str, options: list) -> None:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ `options` —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤
    if isinstance(options[0], list):
        reply_markup = ReplyKeyboardMarkup(options, resize_keyboard=True, one_time_keyboard=True)
    else:
        # –ï—Å–ª–∏ `options` - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–æ–∫, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤
        reply_markup = ReplyKeyboardMarkup([options], resize_keyboard=True, one_time_keyboard=True)

    await update.message.reply_text(message, reply_markup=reply_markup)
    logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", message)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
async def send_inline_message(update: Update, context: ContextTypes.DEFAULT_TYPE, message: str, buttons: list) -> None:
    keyboard = InlineKeyboardMarkup(buttons)
    await update.message.reply_text(message, reply_markup=keyboard)
    logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏: %s", message)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    user_state = context.user_data.get('state', 'main_menu')

    logger.info("–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: %s", user_state)

    user_choice = update.message.text.strip()

    if user_id == ADMIN_ID:
        if user_state == 'main_menu':
            context.user_data['state'] = 'admin_menu'
            menu = MENU_TREE['admin_menu']
            await send_message(update, context, menu['message'], menu['options'])
            return

        elif user_state == 'admin_menu':
            if user_choice == '–ú–æ–¥–µ—Ä–∞—Ü–∏—è':
                reviews = context.application.bot_data.get('reviews', [])
                if not reviews:
                    await send_message(update, context, "–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.",
                                       MENU_TREE['admin_menu']['options'])
                    context.user_data['state'] = 'admin_menu'
                    return

                for i, review in enumerate(reviews):
                    review_text = f"{i + 1}. {review['review']} - {'–û–¥–æ–±—Ä–µ–Ω–æ' if review.get('approved', False) else '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏'}"
                    buttons = [
                        [InlineKeyboardButton("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å‚úÖ", callback_data=f'publish_{i}'),
                         InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—åüóëÔ∏è", callback_data=f'delete_{i}')]
                    ]
                    reply_markup = InlineKeyboardMarkup(buttons)
                    await update.message.reply_text(review_text, reply_markup=reply_markup)

                context.user_data['state'] = 'moderation_menu'
                return  # –ó–¥–µ—Å—å —É–±–∏—Ä–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

        elif user_state == 'moderation_menu':
            if user_choice == '–ê–¥–º–∏–Ω –º–µ–Ω—é':
                context.user_data['state'] = 'admin_menu'
                menu = MENU_TREE['admin_menu']
                await send_message(update, context, menu['message'], menu['options'])
                return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π...

    if user_state == 'write_review':
        review = user_choice
        if review:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤
            context.application.bot_data.setdefault('reviews', []).append({
                'review': review,
                'approved': False  # –û—Ç–º–µ—Ç–∫–∞ –æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            })
            await send_message(update, context,
                               "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.",
                               MENU_TREE['main_menu']['options'])
        else:
            await send_message(update, context, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞.",
                               MENU_TREE['write_review']['options'])

        context.user_data['state'] = 'main_menu'
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è "–û—Ç–∑—ã–≤—ãüí¨"
    if user_state == 'reviews_menu':
        if user_choice in MENU_TREE['reviews_menu']['next_state']:
            context.user_data['state'] = MENU_TREE['reviews_menu']['next_state'][user_choice]
            next_menu = MENU_TREE.get(context.user_data['state'])
            await send_message(update, context, next_menu['message'], next_menu['options'])
        else:
            await send_message(update, context, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.",
                               MENU_TREE['reviews_menu']['options'])
        return
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    menu = MENU_TREE.get(user_state)
    user_choice = update.message.text

    if user_choice == '–í –Ω–∞—á–∞–ª–æüîô':
        context.user_data['state'] = 'main_menu'
        menu = MENU_TREE['main_menu']
        await send_message(update, context, menu['message'], menu['options'])
        return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –≤ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—ÄüßÆ–µ
    if user_state == 'calculator_menu' and user_choice in CLEANING_PRICES:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ
        context.user_data['selected_tariff'] = user_choice
        context.user_data['price_per_sqm'] = CLEANING_PRICES[user_choice]

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤
        context.user_data['state'] = 'enter_square_meters'
        await send_message(update, context, MENU_TREE['enter_square_meters']['message'],
                           MENU_TREE['enter_square_meters']['options'])
        return
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –≤ –º–µ–Ω—é "–¢–∞—Ä–∏—Ñ—ãüè∑Ô∏è"
    if user_state == 'show_tariffs' and user_choice in CLEANING_PRICES:
        details = CLEANING_DETAILS.get(user_choice)
        if details:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                with open(details['image_path'], 'rb') as image_file:
                    await update.message.reply_photo(photo=image_file)
            except FileNotFoundError:
                logger.error(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {details['image_path']}")
                await update.message.reply_text("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—ÄüßÆ–µ
            context.user_data['selected_tariff'] = user_choice
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –º–µ–Ω—é –ö–∞–ª—å–∫—É–ª—è—Ç–æ—ÄüßÆ–∞
            context.user_data['state'] = f'detail_{user_choice}'
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—ÄüßÆ" –∏ "–í –Ω–∞—á–∞–ª–æüîô"
            await send_message(update, context, details['details_text'], MENU_TREE[f'detail_{user_choice}']['options'])
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—ÄüßÆ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
    if user_state.startswith('detail_') and user_choice == '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—ÄüßÆ':
        tariff_name = user_state.split('_')[1]
        context.user_data['price_per_sqm'] = CLEANING_PRICES[tariff_name]
        context.user_data['state'] = 'enter_square_meters'
        await send_message(update, context, MENU_TREE['enter_square_meters']['message'], MENU_TREE['enter_square_meters']['options'])
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤
    if user_state == 'enter_square_meters':
        try:
            sqm = float(user_choice)
            price_per_sqm = context.user_data.get('price_per_sqm')
            if price_per_sqm is None:
                await send_message(update, context, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.', ['–í –Ω–∞—á–∞–ª–æüîô'])
                context.user_data['state'] = 'main_menu'
                return

            result = calculate(price_per_sqm, sqm)
            await send_message(update, context, result['formatted_message'], MENU_TREE['calculate_result']['options'])
            context.user_data['state'] = 'main_menu'
        except ValueError:
            await send_message(update, context, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤.', menu['options'])
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–µ–Ω—é "–°–≤—è–∑–∞—Ç—å—Å—èüìû"
    if user_state == 'main_menu' and user_choice == '–°–≤—è–∑–∞—Ç—å—Å—èüìû':
        context.user_data['state'] = 'contact'

        # Inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–≤—è–∑–∏
        buttons = [
            [InlineKeyboardButton("WhatsApp", url="https://wa.me/79956124581")],
            [InlineKeyboardButton("Telegram", url="https://t.me/kaliroom")],
            [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="show_phone_number")]
        ]
        await send_inline_message(update, context, MENU_TREE['contact']['message'], buttons)

        # –û–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "–í –Ω–∞—á–∞–ª–æüîô" –≤ ReplyKeyboardMarkup
        reply_keyboard = [['–í –Ω–∞—á–∞–ª–æüîô']]
        reply_markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
        return

    if user_state == 'enter_square_meters':
        try:
            square_meters = float(user_choice)
            price_per_sqm = CLEANING_PRICES[context.user_data.get('selected_tariff', '–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—èüßπ ')]
            result = calculate(price_per_sqm, square_meters)
            context.user_data['state'] = 'calculate_result'
            await send_message(update, context, result['formatted_message'], MENU_TREE['calculate_result']['options'])
        except ValueError:
            await send_message(update, context, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", menu['options'])
        return

    if user_choice in menu['next_state']:
        next_state = menu['next_state'][user_choice]
        context.user_data['state'] = next_state

        if next_state == 'enter_square_meters':
            context.user_data['selected_tariff'] = user_choice  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ
        next_menu = MENU_TREE.get(next_state)
        if next_menu:
            await send_message(update, context, next_menu['message'], next_menu['options'])
    else:
        await send_message(update, context, menu.get('fallback', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.'), menu['options'])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
# ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
CHANNEL_ID = -1002249882445


async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        query = update.callback_query
        await query.answer()

        reviews = context.application.bot_data.get('reviews', [])

        if query.data.startswith('publish_'):
            review_index = int(query.data.split('_')[1])
            if 0 <= review_index < len(reviews):
                review = reviews[review_index]['review']
                try:
                    await context.bot.send_message(chat_id=CHANNEL_ID, text=review)
                    reviews[review_index]['approved'] = True
                    await query.edit_message_text(text="–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")
                except telegram.error.Forbidden as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª: {e}")
                    await query.edit_message_text(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞ –≤ –∫–∞–Ω–∞–ª.")

        elif query.data.startswith('delete_'):
            review_index = int(query.data.split('_')[1])
            if 0 <= review_index < len(reviews):
                del reviews[review_index]
                await query.edit_message_text(text="–û—Ç–∑—ã–≤ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω.")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –µ—â–µ –û—Ç–∑—ã–≤—ãüí¨ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if not reviews or all(review.get('approved') for review in reviews):
            await context.bot.send_message(chat_id=query.message.chat_id, text="–í—Å–µ –û—Ç–∑—ã–≤—ãüí¨ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
        logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π '–ê–¥–º–∏–Ω –º–µ–Ω—é'")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        logger.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏: {context.user_data['state']}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        if query.message:
            menu = MENU_TREE['moderation_menu']
            await context.bot.send_message(chat_id=query.message.chat_id, text=menu['message'],
                                           reply_markup=ReplyKeyboardMarkup([menu['options']], resize_keyboard=True))
        else:
            logger.error("–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏: {e}")


def calculate(price_per_sqm, sqm):
    total_cost = price_per_sqm * sqm
    formatted_message = f'–°—Ç–æ–∏–º–æ—Å—Ç—å —É–±–æ—Ä–∫–∏: {total_cost:.2f} —Ä—É–±.'
    return {
        'total_cost': total_cost,
        'formatted_message': formatted_message
    }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if user_id == ADMIN_ID:
        context.user_data['state'] = 'admin_menu'
        menu = MENU_TREE['admin_menu']
    else:
        context.user_data['state'] = 'main_menu'
        menu = MENU_TREE['main_menu']

    await send_message(update, context, menu['message'], menu['options'])


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")

    # –í–∞—à —Ç–æ–∫–µ–Ω
    TOKEN = '7363733923:AAHKPw_fvjG2F3PBE2XP6Sj49u04uy7wpZE'  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Application –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω
    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    application.add_handler(CommandHandler("start", start))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
    application.add_handler(CallbackQueryHandler(button_click))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω, –Ω–∞—á–∞–ª–æ polling...")
    application.run_polling()

if __name__ == '__main__':
    main()
