# -*- coding: utf-8 -*-
import requests
import httpx
import logging
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler


import telegram.error  # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ telegram.error.Forbidden

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ DEBUG
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG
)

logger = logging.getLogger(__name__)

# –£–∫–∞–∂–∏—Ç–µ –≤–∞—à Telegram ID
ADMIN_ID = 1238802718  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π Telegram ID

# –¶–µ–Ω—ã –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —É–±–æ—Ä–∫–∏
CLEANING_PRICES = {
    '–ì–µ–Ω.–£–±–æ—Ä–∫–∞üßº': 125,
    '–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—èüßπ': 75,
    '–ü–æ—Å–ª–µ—Å—Ç—Ä–æ–πüõ†': 190,
    '–ú—ã—Ç—å–µ –æ–∫–æ–Ωüß¥': 350
}

# –ü—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –∏ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
CLEANING_DETAILS = {
    '–ì–µ–Ω.–£–±–æ—Ä–∫–∞üßº': {
        'image_path': r'C:\Users\travo\Desktop\tg_bot\img\general.jpg',
        'details_text': [
            '–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ —Ç–∞—Ä–∏—Ñ—É "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞" —Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ 125—Ä. –∑–∞ –∫–≤.–ú',
            '–ü–µ—Ä–µ—á–µ–Ω—å —É—Å–ª—É–≥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–π —É–±–æ—Ä–∫–∏:\n\n1. –£–±–æ—Ä–∫–∞ –ø–æ–ª–æ–≤:\n- –í–ª–∞–∂–Ω–∞—è —É–±–æ—Ä–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª–æ–≤.\n- –ì–ª—É–±–æ–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç—Ä—É–¥–Ω–æ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç, –≤–∫–ª—é—á–∞—è —É–≥–ª—ã –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –ø–æ–¥ –º–µ–±–µ–ª—å—é.\n\n2. –ú–æ–π–∫–∞ –∑–µ—Ä–∫–∞–ª:\n- –û—á–∏—Å—Ç–∫–∞ –∑–µ—Ä–∫–∞–ª –∏ —Å—Ç–µ–∫–ª—è–Ω–Ω—ã—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π –¥–æ –±–ª–µ—Å–∫–∞.\n- –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ª–µ—Ç–∞ –∏ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–π.\n\n3. –£–±–æ—Ä–∫–∞ –∫—É—Ö–Ω–∏:\n- –û—á–∏—â–µ–Ω–∏–µ –Ω–∞—Å—Ç–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä—Ç—É–∫–∞ –æ—Ç —Å–ª–µ–¥–æ–≤ –≥–æ—Ç–æ–≤–∫–∏.\n- –ß–∏—Å—Ç–∫–∞ –∏ –¥–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏—è –∫—É—Ö–æ–Ω–Ω—ã—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π –≤–Ω—É—Ç—Ä–∏ –≥–∞—Ä–Ω–∏—Ç—É—Ä–∞ –∏ —Å–Ω–∞—Ä—É–∂–∏.\n- –ú—ã—Ç—å–µ –∏ –ø–æ–ª–∏—Ä–æ–≤–∫–∞ –∫—É—Ö–æ–Ω–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ (–¥—É—Ö–æ–≤–∫–∞, –º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞, —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫).',
            '4. –£–±–æ—Ä–∫–∞ –≤–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã –∏ —Ç—É–∞–ª–µ—Ç–∞:\n- –ú—ã—Ç—å–µ —Å—Ç–µ–Ω –æ—Ç –∏–∑–≤–µ—Å—Ç–∫–æ–≤–æ–≥–æ –Ω–∞–ª–µ—Ç–∞ –≤ —Å–∞–Ω—É–∑–ª–∞—Ö.\n- –ß–∏—Å—Ç–∫–∞ –∏ –¥–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏—è —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∏ (—É–Ω–∏—Ç–∞–∑, —Ä–∞–∫–æ–≤–∏–Ω–∞, –≤–∞–Ω–Ω–∞, –¥—É—à).\n- –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–≤–µ—Å—Ç–∫–æ–≤–æ–≥–æ –Ω–∞–ª–µ—Ç–∞ –∏ –ø–ª–µ—Å–µ–Ω–∏.\n- –ü–æ–ª–∏—Ä–æ–≤–∫–∞ —Å–º–µ—Å–∏—Ç–µ–ª–µ–π –∏ –∑–µ—Ä–∫–∞–ª.\n\n5. –£–¥–∞–ª–µ–Ω–∏–µ –ø—ã–ª–∏:\n- –ü—Ä–æ—Ç–∏—Ä–∞–Ω–∏–µ –∏ –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π –æ—Ç –ø—ã–ª–∏ (–º–µ–±–µ–ª—å, –ø–æ–ª–∫–∏, —Ç–µ—Ö–Ω–∏–∫–∞).\n- –û—á–∏—Å—Ç–∫–∞ –ø–ª–∏–Ω—Ç—É—Å–æ–≤, –∫–∞—Ä–Ω–∏–∑–æ–≤, –¥–≤–µ—Ä–µ–π –∏ –ø–æ–¥–æ–∫–æ–Ω–Ω–∏–∫–æ–≤.\n- –£–±–æ—Ä–∫–∞ –ø—ã–ª–∏ —Å –æ—Å–≤–µ—Ç–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–±–æ—Ä–æ–≤ –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–µ–∫–æ—Ä–∞.\n\n6. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π –∞–Ω—Ç–∏–±–∞–∫—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏:\n- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–µ–∫ –¥–≤–µ—Ä–µ–π, –≤—ã–∫–ª—é—á–∞—Ç–µ–ª–µ–π –∏ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç–æ —Ç—Ä–æ–≥–∞–µ–º—ã—Ö –º–µ—Å—Ç.',
            '7. –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞:\n- –†–∞—Å–∫–ª–∞–¥–∫–∞ –≤–µ—â–µ–π –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è.\n- –†–∞–∑–±–æ—Ä –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤–µ—â–µ–π, –∫–Ω–∏–≥, –æ–¥–µ–∂–¥—ã.\n\n8. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:\n- –ú—ã—Ç—å–µ –∂–∞–ª—é–∑–∏.\n- –ß–∏—Å—Ç–∫–∞ –∏ —É—Ö–æ–¥ –∑–∞ –∫–æ–º–Ω–∞—Ç–Ω—ã–º–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏.'
        ]
    },
    '–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—èüßπ': {
        'image_path': r'C:\Users\travo\Desktop\tg_bot\img\vacuumcat.png',
        'details_text': [
            '–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ —Ç–∞—Ä–∏—Ñ—É "–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞ —É–±–æ—Ä–∫–∞" —Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ 75—Ä. –∑–∞ –∫–≤.–ú',
            '–ü–µ—Ä–µ—á–µ–Ω—å —É—Å–ª—É–≥ –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ "–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—è —É–±–æ—Ä–∫–∞":\n\n1. –õ–µ–≥–∫–∞—è —É–±–æ—Ä–∫–∞ –ø–æ–ª–æ–≤:\n- –í–ª–∞–∂–Ω–∞—è —É–±–æ—Ä–∫–∞ –≤—Å–µ—Ö –≤–∏–¥–æ–≤ –Ω–∞–ø–æ–ª—å–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏–π.\n- –û—á–∏—Å—Ç–∫–∞ —Ç—Ä—É–¥–Ω–æ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç, –≤–∫–ª—é—á–∞—è —É–≥–ª—ã –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –ø–æ–¥ –º–µ–±–µ–ª—å—é.\n\n2. –ü—Ä–æ—Ç–∏—Ä–∫–∞ –ø—ã–ª–∏:\n- –£–¥–∞–ª–µ–Ω–∏–µ –ø—ã–ª–∏ —Å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π –º–µ–±–µ–ª–∏, –ø–æ–¥–æ–∫–æ–Ω–Ω–∏–∫–æ–≤, –∏ —Ç–µ—Ö–Ω–∏–∫–∏.\n- –õ–µ–≥–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–ª–∏–Ω—Ç—É—Å–æ–≤ –∏ –¥–≤–µ—Ä–Ω—ã—Ö —Ä—É—á–µ–∫.',
            '3. –£–±–æ—Ä–∫–∞ –∫—É—Ö–Ω–∏:\n- –ü—Ä–æ—Ç–∏—Ä–∫–∞ –∫—É—Ö–æ–Ω–Ω—ã—Ö —Å—Ç–æ–ª–µ—à–Ω–∏—Ü, —Å—Ç–æ–ª–∞ –∏ —Ä–∞–±–æ—á–∏—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π.\n- –û—á–∏—Å—Ç–∫–∞ –≤–∞—Ä–æ—á–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –∏ –≤–Ω–µ—à–Ω–µ–π —á–∞—Å—Ç–∏ –∫—É—Ö–æ–Ω–Ω–æ–≥–æ –≥–∞—Ä–Ω–∏—Ç—É—Ä–∞.\n\n4. –£–±–æ—Ä–∫–∞ –≤–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã –∏ —Ç—É–∞–ª–µ—Ç–∞:\n- –ß–∏—Å—Ç–∫–∞ –∏ –¥–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏—è —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∏ (—Ä–∞–∫–æ–≤–∏–Ω–∞, —É–Ω–∏—Ç–∞–∑, –¥—É—à–µ–≤–∞—è –∫–∞–±–∏–Ω–∞).\n- –û—á–∏—Å—Ç–∫–∞ –∑–µ—Ä–∫–∞–ª –∏ –ø–æ–ª–æ–∫.\n\n5. –ú–æ–π–∫–∞ –∑–µ—Ä–∫–∞–ª –∏ —Å—Ç–µ–∫–ª—è–Ω–Ω—ã—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π –æ—Ç –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤ –ø–∞–ª—å—Ü–µ–≤ –∏ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–π.\n\n6. –í—ã–Ω–æ—Å –º—É—Å–æ—Ä–∞.',
            '7. –ù–∞–≤–µ–¥–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞:\n- –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –≤–µ—â–µ–π –∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –º–µ–ª–∫–æ–≥–æ –±–µ—Å–ø–æ—Ä—è–¥–∫–∞.\n- –ó–∞–º–µ–Ω–∞ –ø–æ—Å—Ç–µ–ª—å–Ω–æ–≥–æ –±–µ–ª—å—è –ø–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏.'
        ]
    },
    '–ü–æ—Å–ª–µ—Å—Ç—Ä–æ–πüõ†': {
        'image_path': r'C:\Users\travo\Desktop\tg_bot\img\build.jpg',
        'details_text': [
            '–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ —Ç–∞—Ä–∏—Ñ—É "–ü–æ—Å–ª–µ—Å—Ç—Ä–æ–π" —Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ 190—Ä. –∑–∞ –∫–≤.–ú',
            '–ü–µ—Ä–µ—á–µ–Ω—å —É—Å–ª—É–≥ –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ "–ü–æ—Å–ª–µ—Å—Ç—Ä–æ–π":\n\n1. –í—ã–Ω–æ—Å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º—É—Å–æ—Ä–∞:\n- –°–±–æ—Ä –∏ –≤—ã–Ω–æ—Å –Ω–µ –∫—Ä—É–ø–Ω–æ–≥–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º—É—Å–æ—Ä–∞.\n\n2. –ú–æ–π–∫–∞ –æ–∫–æ–Ω:\n- –¢—â–∞—Ç–µ–ª—å–Ω–∞—è –º–æ–π–∫–∞ –æ–∫–æ–Ω —Å–æ –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω, –≤–∫–ª—é—á–∞—è —Ä–∞–º—ã –∏ –ø–æ–¥–æ–∫–æ–Ω–Ω–∏–∫–∏.\n- –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–µ–¥–æ–≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –ø—ã–ª–∏ –∏ –≥—Ä—è–∑–∏.',
            '3. –û–±–µ—Å–ø—ã–ª–∏–≤–∞–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π:\n- –í–ª–∞–∂–Ω–∞—è –∏ —Å—É—Ö–∞—è —É–±–æ—Ä–∫–∞ —Å—Ç–µ–Ω, –º–µ–±–µ–ª–∏, –ª—é—Å—Ç—Ä, –ø–ª–∏–Ω—Ç—É—Å–æ–≤, —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤ –∏ —Ä–æ–∑–µ—Ç–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –ø—ã–ª–∏.\n\n4. –ú–æ–π–∫–∞ –¥–≤–µ—Ä–µ–π –∏ –¥–≤–µ—Ä–Ω—ã—Ö —Ä–∞–º:\n- –û—á–∏—Å—Ç–∫–∞ –¥–≤–µ—Ä–µ–π –∏ —Ä–∞–º –æ—Ç –ø—ã–ª–∏, —Å–ª–µ–¥–æ–≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–π.\n- –ü—Ä–æ—Ç–∏—Ä–∫–∞ –∏ –ø–æ–ª–∏—Ä–æ–≤–∫–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —á–∏—Å—Ç–æ—Ç—ã –∏ –±–ª–µ—Å–∫–∞.\n\n5. –ú–æ–π–∫–∞ —Å—Ç–µ–Ω –≤ —Å–∞–Ω—É–∑–ª–∞—Ö:\n- –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—Ç–∏—Ä–∫–∏ –∏ —Å–ª–µ–¥–æ–≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–º–µ—Å–µ–π —Å –ø–ª–∏—Ç–∫–∏ –≤ –≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö –∏ —Å–∞–Ω—É–∑–ª–∞—Ö.',
            '6. –ü–æ–ª–∏—Ä–æ–≤–∫–∞ –∑–µ—Ä–∫–∞–ª –∏ —Å—Ç–µ–∫–ª—è–Ω–Ω—ã—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π:\n- –£–¥–∞–ª–µ–Ω–∏–µ –ø—è—Ç–µ–Ω, –Ω–∞–ª–µ—Ç–∞ –∏ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–π.\n- –ù–∞—Ç–∏—Ä–∞–Ω–∏–µ –∑–µ—Ä–∫–∞–ª –∏ –≤—Å–µ—Ö —Å—Ç–µ–∫–ª—è–Ω–Ω—ã—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π –¥–æ –±–ª–µ—Å–∫–∞.\n\n7. –û—á–∏—Å—Ç–∫–∞ –∏ –ø–æ–ª–∏—Ä–æ–≤–∫–∞ —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∏:\n- –£–¥–∞–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –≥—Ä—è–∑–∏ –∏ –ø—è—Ç–µ–Ω.\n- –ù–∞—Ç–∏—Ä–∞–Ω–∏–µ –∏ –¥–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏—è –≤—Å–µ—Ö —Å–∞–Ω—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–±–æ—Ä–æ–≤ (—É–Ω–∏—Ç–∞–∑—ã, —Ä–∞–∫–æ–≤–∏–Ω—ã, –≤–∞–Ω–Ω—ã).\n\n8. –ú—ã—Ç—å–µ –∏ –¥–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏—è –ø–æ–ª–æ–≤:\n- –ì–ª—É–±–æ–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ–ª–æ–≤ –æ—Ç —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –ø—ã–ª–∏ –∏ –≥—Ä—è–∑–∏.\n- –î–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏—è –Ω–∞–ø–æ–ª—å–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏–π –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–π.'
        ]
    },
    '–ú—ã—Ç—å–µ –æ–∫–æ–Ωüß¥': {
        'image_path': r'C:\Users\travo\Desktop\tg_bot\img\window.jpg',
        'details_text': [
            '–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ —Ç–∞—Ä–∏—Ñ—É "–ú—ã—Ç—å–µ –æ–∫–æ–Ω" —Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ 350—Ä. –∑–∞ —Å—Ç–≤–æ—Ä–∫—É',
            '–ü–µ—Ä–µ—á–µ–Ω—å —É—Å–ª—É–≥ –¥–ª—è –º—ã—Ç—å—è –æ–∫–æ–Ω:\n\n- –ú–æ–π–∫–∞ —Ä–∞–º —Å –¥–≤—É—Ö —Å—Ç–æ—Ä–æ–Ω.\n- –û—á–∏—Å—Ç–∫–∞ —Å—Ç–µ–∫–æ–ª –æ—Ç –Ω–∞–∫–ª–µ–µ–∫ –∏ —Å–ª–µ–¥–æ–≤ –∫–ª–µ—è.\n- –ü–æ–ª–∏—Ä–æ–≤–∫–∞ —Å—Ç–µ–∫–æ–ª —Å –¥–≤—É—Ö —Å—Ç–æ—Ä–æ–Ω.\n-–ú–æ–π–∫–∞ –ø–æ–¥–æ–∫–æ–Ω–Ω–∏–∫–æ–≤.\n- –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —á–∏—Å—Ç–æ—Ç—ã –∏ –ø–æ—Ä—è–¥–∫–∞ –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.'
        ]
    }
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –º–µ–Ω—é
MENU_TREE = {
    'main_menu': {
        'message': '–ü—Ä–∏–≤–µ—Ç! –Ø –í–µ—Ä–∞, —Ç–≤–æ—è —Ñ–µ—è —á–∏—Å—Ç–æ—Ç—ã.\n\n–ú–æ–π —Ä–æ–±–æ—Ç-—É–±–æ—Ä—â–∏–∫ –ø–æ–º–æ–∂–µ—Ç:\n\nüîç–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–æ–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏\n\nüßÆ–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–±–æ—Ä–∫–∏\n\nüöó–ó–∞–∫–∞–∑–∞—Ç—å –∫–ª–∏–Ω–∏–Ω–≥ –Ω–∞ –¥–æ–º\n\nüìû–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π.',
        'options': [
            ['–¢–∞—Ä–∏—Ñ—ãüè∑Ô∏è', '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—ÄüßÆ'],  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
            ['–°–≤—è–∑–∞—Ç—å—Å—èüìû', '–û—Ç–∑—ã–≤—ãüí¨']     # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞
        ],
        'next_state': {
            '–¢–∞—Ä–∏—Ñ—ãüè∑Ô∏è': 'show_tariffs',
            '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—ÄüßÆ': 'calculator_menu',
            '–°–≤—è–∑–∞—Ç—å—Å—èüìû': 'contact',
            '–û—Ç–∑—ã–≤—ãüí¨': 'reviews_menu'
        }
    },
    'admin_menu': {
        'message': '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        'options': ['–ú–æ–¥–µ—Ä–∞—Ü–∏—è'],  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–í –Ω–∞—á–∞–ª–æüîô"
        'next_state': {
            '–ú–æ–¥–µ—Ä–∞—Ü–∏—è': 'moderation_menu',
        }
    },
    'moderation_menu': {
        'message': '–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é:)',
        'options': ['–ê–¥–º–∏–Ω –º–µ–Ω—é'],  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ê–¥–º–∏–Ω –º–µ–Ω—é"
        'next_state': {
            '–ê–¥–º–∏–Ω –º–µ–Ω—é': 'admin_menu'
        }
    },
    'reviews_menu': {
        'message': '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?',
        'options': ['–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤', '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –û—Ç–∑—ã–≤—ãüí¨', '–í –Ω–∞—á–∞–ª–æüîô'],
        'next_state': {
            '–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤': 'write_review',
            '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –û—Ç–∑—ã–≤—ãüí¨': 'view_reviews',
            '–í –Ω–∞—á–∞–ª–æüîô': 'main_menu'
        }
    },
    'view_reviews': {
        'message': '–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤—Å–µ –æ—Ç–∑—ã–≤—ã –Ω–∞ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ:',
        'options': ['–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞–Ω–∞–ª—É', '–í –Ω–∞—á–∞–ª–æüîô'],
        'next_state': {
            '–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞–Ω–∞–ª—É': 'open_channel',
            '–í –Ω–∞—á–∞–ª–æüîô': 'reviews_menu'
        }
    },
    'write_review': {
        'message': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤üí¨:',
        'options': ['–í –Ω–∞—á–∞–ª–æüîô'],
        'next_state': {
            '–í –Ω–∞—á–∞–ª–æüîô': 'main_menu'
        }
    },

    'show_tariffs': {
        'message': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π:',
        'options': [
            ['–ì–µ–Ω.–£–±–æ—Ä–∫–∞üßº', '–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—èüßπ'],  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
            ['–ü–æ—Å–ª–µ—Å—Ç—Ä–æ–πüõ†', '–ú—ã—Ç—å–µ –æ–∫–æ–Ωüß¥'],   # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞
            ['–í –Ω–∞—á–∞–ª–æüîô']                      # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
        ],
        'next_state': {
            '–ì–µ–Ω.–£–±–æ—Ä–∫–∞üßº': 'detail_–ì–µ–Ω.–£–±–æ—Ä–∫–∞üßº',
            '–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—èüßπ': 'detail_–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—èüßπ',
            '–ü–æ—Å–ª–µ—Å—Ç—Ä–æ–πüõ†': 'detail_–ü–æ—Å–ª–µ—Å—Ç—Ä–æ–πüõ†',
            '–ú—ã—Ç—å–µ –æ–∫–æ–Ωüß¥': 'detail_–ú—ã—Ç—å–µ –æ–∫–æ–Ωüß¥',
            '–í –Ω–∞—á–∞–ª–æüîô': 'main_menu'
        }
    },
    'calculator_menu': {
        'message': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–±–æ—Ä–∫–∏üß∫:',
        'options': [
            ['–ì–µ–Ω.–£–±–æ—Ä–∫–∞üßº', '–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—èüßπ'],  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
            ['–ü–æ—Å–ª–µ—Å—Ç—Ä–æ–πüõ†', '–ú—ã—Ç—å–µ –æ–∫–æ–Ωüß¥'],   # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞
            ['–í –Ω–∞—á–∞–ª–æüîô']                      # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
        ],
        'next_state': {
            '–ì–µ–Ω.–£–±–æ—Ä–∫–∞üßº': 'enter_square_meters',
            '–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—èüßπ': 'enter_square_meters',
            '–ü–æ—Å–ª–µ—Å—Ç—Ä–æ–πüõ†': 'enter_square_meters',
            '–ú—ã—Ç—å–µ –æ–∫–æ–Ωüß¥': 'enter_square_meters',
            '–í –Ω–∞—á–∞–ª–æüîô': 'main_menu'
        }
    },
    'enter_square_meters': {
        'message': '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤,\n–∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–±—Ä–∞—Ç—å.',
        'options': ['–í –Ω–∞—á–∞–ª–æüîô'],
        'next_state': {
            'calculate_result': 'calculate_result'
        }
    },
    'enter_window_panels': {  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—Ç–≤–æ—Ä–æ–∫ –æ–∫–æ–Ω
        'message': '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω–Ω—ã—Ö —Å—Ç–≤–æ—Ä–æ–∫:',
        'options': ['–í –Ω–∞—á–∞–ª–æüîô'],
        'next_state': {
            'calculate_result': 'calculate_result'
        }
    },
    'calculate_result': {
        'options': ['–í –Ω–∞—á–∞–ª–æüîô', '–°–≤—è–∑–∞—Ç—å—Å—èüìû'],
        'next_state': {
            '–í –Ω–∞—á–∞–ª–æüîô': 'main_menu',
            '–°–≤—è–∑–∞—Ç—å—Å—èüìû': 'contact'
        }
    },
    'contact': {
        'message': '–°–≤—è–∑–∞—Ç—å—Å—èüìû —Å–æ –º–Ω–æ–π –≤—ã –º–æ–∂–µ—Ç–µ —á–µ—Ä–µ–∑ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:',
        'options': ['–í –Ω–∞—á–∞–ª–æüîô'],
        'next_state': {
            '–í –Ω–∞—á–∞–ª–æüîô': 'main_menu'
        }
    }
}

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—ÄüßÆ"
for tariff_name, details in CLEANING_DETAILS.items():
    MENU_TREE[f'detail_{tariff_name}'] = {
        'message': details['details_text'],
        'image_path': details['image_path'],
        'options': ['–ö–∞–ª—å–∫—É–ª—è—Ç–æ—ÄüßÆ', '–ù–∞–∑–∞–¥'],  # –ó–∞–º–µ–Ω—è–µ–º "–í –Ω–∞—á–∞–ª–æüîô" –Ω–∞ "–ù–∞–∑–∞–¥"
        'next_state': {
            '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—ÄüßÆ': 'calculator_menu',
            '–ù–∞–∑–∞–¥': 'show_tariffs'  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–∞—Ä–∏—Ñ–æ–≤
        }
    }

#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
async def go_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['state'] = 'main_menu'
    menu = MENU_TREE['main_menu']
    await send_message(update, context, menu['message'], menu['options'])
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
async def send_message(update: Update, context: ContextTypes.DEFAULT_TYPE, message: str, options: list) -> None:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ `options` —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤
    if isinstance(options[0], list):
        reply_markup = ReplyKeyboardMarkup(options, resize_keyboard=True, one_time_keyboard=True)
    else:
        # –ï—Å–ª–∏ `options` - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–æ–∫, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤
        reply_markup = ReplyKeyboardMarkup([options], resize_keyboard=True, one_time_keyboard=True)

    await update.message.reply_text(message, reply_markup=reply_markup)
    logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
async def send_inline_message(update: Update, context: ContextTypes.DEFAULT_TYPE, message: str, buttons: list) -> None:
    keyboard = InlineKeyboardMarkup(buttons)
    await update.message.reply_text(message, reply_markup=keyboard)
    logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏: %s", message)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    user_state = context.user_data.get('state', 'main_menu')
    logger.info("–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: %s", user_state)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤
    if user_state == 'write_review':
        review_text = update.message.text.strip() if update.message.text else None
        await handle_review_submission(update, context, review_text)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if update.message.text.strip() == '–í –Ω–∞—á–∞–ª–æüîô':
        await go_to_main_menu(update, context)
        return

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –æ–Ω –≤—ã–±—Ä–∞–ª "–ú–æ–¥–µ—Ä–∞—Ü–∏—è"
    if user_id == ADMIN_ID and user_state == 'admin_menu':
        if update.message.text.strip() == '–ú–æ–¥–µ—Ä–∞—Ü–∏—è':
            reviews = context.application.bot_data.get('reviews', [])
            pending_reviews = [review for review in reviews if not review.get('approved', False)]

            if not pending_reviews:
                await send_message(update, context, "–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.",
                                   MENU_TREE['admin_menu']['options'])
                context.user_data['state'] = 'admin_menu'
                return

            for i, review in enumerate(pending_reviews):
                review_text = (
                    f"–û—Ç–∑—ã–≤ ‚Ññ{i + 1}:\n"
                    f"{review['review']}\n\n"
                    f"–ê–≤—Ç–æ—Ä: {review['user_name']} (ID: {review['user_id']})"
                )
                logger.info(f"–û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç–∑—ã–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {review_text}")

                buttons = [
                    [InlineKeyboardButton("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å‚úÖ", callback_data=f'publish_{i}'),
                     InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—åüóëÔ∏è", callback_data=f'delete_{i}')]
                ]
                reply_markup = InlineKeyboardMarkup(buttons)
                await update.message.reply_text(review_text, reply_markup=reply_markup)

            context.user_data['state'] = 'moderation_menu'
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –û—Ç–∑—ã–≤—ãüí¨"
    if user_state == 'reviews_menu' and update.message.text.strip() == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –û—Ç–∑—ã–≤—ãüí¨':
        channel_url = "https://t.me/CleaningSphere"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
        await update.message.reply_text(f"–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤—Å–µ –æ—Ç–∑—ã–≤—ã –Ω–∞ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ: {channel_url}")

        reply_keyboard = [['–í –Ω–∞—á–∞–ª–æüîô']]
        reply_markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)

        context.user_data['state'] = 'main_menu'
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç–∞—Ä–∏—Ñ–æ–≤
    if user_state.startswith('detail_') and update.message.text.strip() == '–ù–∞–∑–∞–¥':
        context.user_data['state'] = 'show_tariffs'
        await send_message(update, context, MENU_TREE['show_tariffs']['message'], MENU_TREE['show_tariffs']['options'])
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id == ADMIN_ID:
        if user_state == 'main_menu':
            context.user_data['state'] = 'admin_menu'
            menu = MENU_TREE['admin_menu']
            await send_message(update, context, menu['message'], menu['options'])
            return

        if user_state == 'admin_menu' and update.message.text.strip() == '–ú–æ–¥–µ—Ä–∞—Ü–∏—è':
            reviews = context.application.bot_data.get('reviews', [])
            pending_reviews = [review for review in reviews if not review.get('approved', False)]

            if not pending_reviews:
                await send_message(update, context, "–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.",
                                   MENU_TREE['admin_menu']['options'])
                context.user_data['state'] = 'admin_menu'
                return

            for i, review in enumerate(pending_reviews):
                review_text = f"{i + 1}. {review['review']} - –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏"
                buttons = [
                    [InlineKeyboardButton("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å‚úÖ", callback_data=f'publish_{i}'),
                     InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—åüóëÔ∏è", callback_data=f'delete_{i}')]
                ]
                reply_markup = InlineKeyboardMarkup(buttons)
                await update.message.reply_text(review_text, reply_markup=reply_markup)

            context.user_data['state'] = 'moderation_menu'
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤
    if user_state == 'moderation_menu':
        reviews = context.application.bot_data.get('reviews', [])
        pending_reviews = [review for review in reviews if not review.get('approved', False)]

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(pending_reviews)} –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏")

        if not pending_reviews:
            await send_message(update, context, "–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.",
                               MENU_TREE['admin_menu']['options'])
            context.user_data['state'] = 'admin_menu'
            return

        for i, review in enumerate(pending_reviews):
            review_text = (
                f"{i + 1}. {review['review']} - {'–û–¥–æ–±—Ä–µ–Ω–æ' if review.get('approved', False) else '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏'}\n"
                f"–ê–≤—Ç–æ—Ä: {review['user_name']} (ID: {review['user_id']})"
            )
            logger.info(f"–û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç–∑—ã–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {review_text}")

            if 'photo_file_ids' in review:
                logger.info(f"–û—Ç–∑—ã–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(review['photo_file_ids'])} —Ñ–æ—Ç–æ")
                media_group = [InputMediaPhoto(photo_id) for photo_id in review['photo_file_ids']]
                await context.bot.send_media_group(chat_id=ADMIN_ID, media=media_group)

            buttons = [
                [InlineKeyboardButton("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å‚úÖ", callback_data=f'publish_{i}'),
                 InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—åüóëÔ∏è", callback_data=f'delete_{i}')]
            ]
            reply_markup = InlineKeyboardMarkup(buttons)
            await update.message.reply_text(review_text, reply_markup=reply_markup)

        context.user_data['state'] = 'moderation_menu'
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è "–û—Ç–∑—ã–≤—ãüí¨"
    if user_state == 'reviews_menu':
        if update.message.text.strip() in MENU_TREE['reviews_menu']['next_state']:
            context.user_data['state'] = MENU_TREE['reviews_menu']['next_state'][update.message.text.strip()]
            next_menu = MENU_TREE.get(context.user_data['state'])
            await send_message(update, context, next_menu['message'], next_menu['options'])
        else:
            await send_message(update, context, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.",
                               MENU_TREE['reviews_menu']['options'])
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    menu = MENU_TREE.get(user_state)
    user_choice = update.message.text.strip()

    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if user_choice == '–í –Ω–∞—á–∞–ª–æüîô':
        await go_to_main_menu(update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –≤ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µüßÆ
    if user_state == 'calculator_menu' and user_choice in CLEANING_PRICES:
        context.user_data['selected_tariff'] = user_choice
        if user_choice == '–ú—ã—Ç—å–µ –æ–∫–æ–Ωüß¥':
            context.user_data['state'] = 'enter_window_panels'
            await send_message(update, context, MENU_TREE['enter_window_panels']['message'],
                               MENU_TREE['enter_window_panels']['options'])
        else:
            context.user_data['price_per_sqm'] = CLEANING_PRICES[user_choice]
            context.user_data['state'] = 'enter_square_meters'
            await send_message(update, context, MENU_TREE['enter_square_meters']['message'],
                               MENU_TREE['enter_square_meters']['options'])
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –≤ –º–µ–Ω—é "–¢–∞—Ä–∏—Ñ—ãüè∑Ô∏è"
    if user_state == 'show_tariffs' and user_choice in CLEANING_PRICES:
        details = CLEANING_DETAILS.get(user_choice)
        if details:
            try:
                with open(details['image_path'], 'rb') as image_file:
                    await update.message.reply_photo(photo=image_file)
            except FileNotFoundError:
                logger.error(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {details['image_path']}")
                await update.message.reply_text("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

            context.user_data['selected_tariff'] = user_choice
            context.user_data['state'] = f'detail_{user_choice}'

            for part in details['details_text']:
                await update.message.reply_text(part)

            await send_message(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                               MENU_TREE[f'detail_{user_choice}']['options'])
        else:
            await send_message(update, context, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.",
                               MENU_TREE['show_tariffs']['options'])
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤–Ω—É—Ç—Ä–∏ –º–µ–Ω—é —Ç–∞—Ä–∏—Ñ–∞
    if user_state.startswith('detail_') and user_choice == '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—ÄüßÆ':
        tariff_name = user_state.split('_')[1]
        context.user_data['selected_tariff'] = tariff_name

        if tariff_name == '–ú—ã—Ç—å–µ –æ–∫–æ–Ωüß¥':
            context.user_data['state'] = 'enter_window_panels'
            await send_message(update, context, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω–Ω—ã—Ö —Å—Ç–≤–æ—Ä–æ–∫:", ['–í –Ω–∞—á–∞–ª–æüîô'])
        else:
            context.user_data['price_per_sqm'] = CLEANING_PRICES[tariff_name]
            context.user_data['state'] = 'enter_square_meters'
            await send_message(update, context, MENU_TREE['enter_square_meters']['message'],
                               MENU_TREE['enter_square_meters']['options'])
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤ –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–∫–æ–Ω–Ω—ã—Ö —Å—Ç–≤–æ—Ä–æ–∫
    if user_state == 'enter_square_meters':
        try:
            sqm = float(user_choice)
            price_per_sqm = context.user_data.get('price_per_sqm')
            if price_per_sqm is None:
                await send_message(update, context,
                                   '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.',
                                   ['–í –Ω–∞—á–∞–ª–æüîô'])
                await go_to_main_menu(update, context)
                return

            result = calculate(price_per_sqm, sqm)
            await send_message(update, context, result['formatted_message'], MENU_TREE['calculate_result']['options'])
            context.user_data['state'] = 'calculate_result'  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        except ValueError:
            await send_message(update, context, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤.',
                               menu['options'])
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–∫–æ–Ω–Ω—ã—Ö —Å—Ç–≤–æ—Ä–æ–∫ –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ "–ú—ã—Ç—å–µ –æ–∫–æ–Ω"
    if user_state == 'enter_window_panels':
        try:
            num_panels = int(user_choice)
            price_per_panel = CLEANING_PRICES['–ú—ã—Ç—å–µ –æ–∫–æ–Ωüß¥']

            result = calculate_windows(price_per_panel, num_panels)

            await send_message(update, context, result['formatted_message'], MENU_TREE['calculate_result']['options'])
            context.user_data['state'] = 'calculate_result'  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        except ValueError:
            await send_message(update, context, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω–Ω—ã—Ö —Å—Ç–≤–æ—Ä–æ–∫.',
                               ['–í –Ω–∞—á–∞–ª–æüîô'])
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–µ–Ω—é "–°–≤—è–∑–∞—Ç—å—Å—èüìû"
    if user_state in ['main_menu', 'calculate_result'] and user_choice == '–°–≤—è–∑–∞—Ç—å—Å—èüìû':
        context.user_data['state'] = 'contact'

        buttons = [
            [InlineKeyboardButton("WhatsApp", url="https://wa.me/79956124581")],
            [InlineKeyboardButton("Telegram", url="https://t.me/kaliroom")],
            [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="show_phone_number")]
        ]
        await send_inline_message(update, context, MENU_TREE['contact']['message'], buttons)

        reply_keyboard = [['–í –Ω–∞—á–∞–ª–æüîô']]
        reply_markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_choice in menu['next_state']:
        next_state = menu['next_state'][user_choice]
        context.user_data['state'] = next_state

        if next_state == 'enter_square_meters':
            context.user_data['selected_tariff'] = user_choice  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ
        next_menu = MENU_TREE.get(next_state)
        if next_menu:
            await send_message(update, context, next_menu['message'], next_menu['options'])
    else:
        await send_message(update, context, menu.get('fallback', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.'), menu['options'])

# ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
CHANNEL_ID = -1002249882445

#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞
async def handle_review_submission(update: Update, context: ContextTypes.DEFAULT_TYPE, review_text=None):
    if review_text:
        context.user_data['review_text'] = review_text

    if 'photo_file_ids' not in context.user_data and not context.user_data.get('review_text'):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ –∫ –æ—Ç–∑—ã–≤—É.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤
    review_data = {
        'review': context.user_data.get('review_text', ''),
        'user_name': update.message.from_user.full_name,
        'user_id': update.message.from_user.id,
        'message_id': update.message.message_id,
        'approved': False,
        'photo_file_ids': context.user_data.get('photo_file_ids', [])
    }

    context.application.bot_data.setdefault('reviews', []).append(review_data)
    context.user_data.pop('photo_file_ids', None)
    context.user_data.pop('review_text', None)

    logger.info(f"–û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {review_data['review']} –æ—Ç {review_data['user_name']} (ID: {review_data['user_id']})")
    await send_message(update, context, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.",
                       MENU_TREE['main_menu']['options'])
    await go_to_main_menu(update, context)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤ –≤ –∫–∞–Ω–∞–ª
async def publish_review(context: ContextTypes.DEFAULT_TYPE, review: dict) -> None:
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –≤ –∫–∞–Ω–∞–ª, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if review.get('review'):
            await context.bot.send_message(chat_id=CHANNEL_ID, text=review['review'])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç–∑—ã–≤–∞ –≤ –∫–∞–Ω–∞–ª, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        photo_ids = review.get('photo_file_ids', [])
        if photo_ids:
            media_group = [InputMediaPhoto(photo_id) for photo_id in photo_ids]
            await context.bot.send_media_group(chat_id=CHANNEL_ID, media=media_group)

        review['approved'] = True
        logger.info(f"–û—Ç–∑—ã–≤ –æ—Ç {review['user_name']} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞: {e}")
        # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        await context.bot.send_message(chat_id=ADMIN_ID, text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤ –æ—Ç {review['user_name']}. –û—à–∏–±–∫–∞: {e}")

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        query = update.callback_query
        await query.answer()

        user_state = context.user_data.get('state', 'main_menu')
        reviews = context.application.bot_data.get('reviews', [])

        if query.data == "show_phone_number":
            phone_number = "+7 (995) 612-45-81"  # –£–∫–∞–∂–∏—Ç–µ –Ω—É–∂–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            await query.edit_message_text(text=f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}")
            return

        if query.data.startswith('publish_'):
            review_index = int(query.data.split('_')[1])
            await publish_review(context, reviews[review_index])
            await query.edit_message_text(text="–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")
        elif query.data.startswith('delete_'):
            review_index = int(query.data.split('_')[1])
            reviews.pop(review_index)
            await query.edit_message_text(text="–û—Ç–∑—ã–≤ —É–¥–∞–ª–µ–Ω.")
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏: {e}")

# –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
async def send_contact_options(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    buttons = [
        [InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ WhatsApp", callback_data='contact_whatsapp')],
        [InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram", callback_data='contact_telegram')],
    ]
    reply_markup = InlineKeyboardMarkup(buttons)

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:", reply_markup=reply_markup)

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.message.from_user
        photo_file_id = update.message.photo[-1].file_id  # –ü–æ–ª—É—á–∞–µ–º ID —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ –≤ user_data
        if 'photo_file_ids' not in context.user_data:
            context.user_data['photo_file_ids'] = []
        context.user_data['photo_file_ids'].append(photo_file_id)

        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç {user.first_name} (ID: {user.id}). File ID: {photo_file_id}")

        await update.message.reply_text("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

def calculate(price_per_sqm, sqm):
    total_cost = price_per_sqm * sqm
    formatted_message = f'–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–π —É–±–æ—Ä–∫–∏: {total_cost:.2f} —Ä—É–±.'
    return {
        'total_cost': total_cost,
        'formatted_message': formatted_message
    }
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º—ã—Ç—å—è –æ–∫–æ–Ω
def calculate_windows(price_per_panel, num_panels):
    total_cost = price_per_panel * num_panels
    formatted_message = f'–°—Ç–æ–∏–º–æ—Å—Ç—å –º—ã—Ç—å—è –æ–∫–æ–Ω: {total_cost:.2f} —Ä—É–±. –∑–∞ {num_panels} —Å—Ç–≤–æ—Ä–æ–∫(–∏).'
    return {
        'total_cost': total_cost,
        'formatted_message': formatted_message
    }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if user_id == ADMIN_ID:
        context.user_data['state'] = 'admin_menu'
        menu = MENU_TREE['admin_menu']
    else:
        context.user_data['state'] = 'main_menu'
        menu = MENU_TREE['main_menu']

    await send_message(update, context, menu['message'], menu['options'])


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")

    TOKEN = '7363733923:AAHKPw_fvjG2F3PBE2XP6Sj49u04uy7wpZE'

    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_click))

    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω, –Ω–∞—á–∞–ª–æ polling...")
    application.run_polling()


if __name__ == '__main__':
    main()
